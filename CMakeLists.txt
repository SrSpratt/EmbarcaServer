# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.1)
set(toolchainVersion 14_2_Rel1)
set(picotoolVersion 2.1.1)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================


cmake_minimum_required(VERSION 3.13)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(PICO_BOARD pico_w CACHE STRING "Board type")

# Pull in Raspberry Pi Pico SDK (must be before project)
include(pico_sdk_import.cmake)

project(webserver C CXX ASM)

# Initialise the Raspberry Pi Pico SDK
pico_sdk_init()

# Add executable. Default name is the project name, version 0.1

add_executable(webserver 
    webserver.c
    )

pico_set_program_name(webserver "webserver")
pico_set_program_version(webserver "0.1")

# Modify the below lines to enable/disable output over UART/USB
pico_enable_stdio_uart(webserver 0)
pico_enable_stdio_usb(webserver 1)

# Add the standard library to the build
target_link_libraries(webserver
        pico_stdlib
        hardware_gpio
        hardware_pio
        hardware_adc
        hardware_pwm
        pico_cyw43_arch_lwip_threadsafe_background
)

pico_generate_pio_header(${PROJECT_NAME} ${CMAKE_SOURCE_DIR}/RVpio.pio)

# Add the standard include files to the build
target_include_directories(webserver PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}
    ${PICO_SDK_PATH}/lib/lwip/src/include/lwip
)


target_sources(webserver PRIVATE
    ${PICO_SDK_PATH}/lib/lwip/src/apps/http/httpd.c
    ${PICO_SDK_PATH}/lib/lwip/src/apps/http/fs.c
)


# Add any user requested libraries

pico_add_extra_outputs(webserver)
